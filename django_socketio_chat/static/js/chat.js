// Generated by CoffeeScript 1.4.0
(function() {
  var Chat, ChatApp, ParticipantList, UserList, UserState,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  UserState = (function() {
    var session_state_el;

    session_state_el = null;

    function UserState(conn) {
      var session_state_dropdown,
        _this = this;
      this.conn = conn;
      this.set_signed_off = __bind(this.set_signed_off, this);

      this.set_invisible = __bind(this.set_invisible, this);

      this.set_busy = __bind(this.set_busy, this);

      this.set_available = __bind(this.set_available, this);

      this.session_state_el = $('.session-state');
      session_state_dropdown = "<div class=\"btn-group\">\n    <a class=\"btn dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">\n        <span class=\"state\"></span>\n        <span class=\"caret\"></span>\n    </a>\n    <ul class=\"dropdown-menu right-align-dropdown\">\n        <li><a class=\"become-available\" href=\"#\">Available</a></li>\n        <li><a class=\"become-busy\" href=\"#\">Busy</a></li>\n        <li><a class=\"become-invisible\" href=\"#\">Invisible</a></li>\n        <li><a class=\"sign-off\" href=\"#\">Sign off</a></li>\n    </ul>\n</div>";
      this.session_state_el.html(session_state_dropdown);
      session_state_dropdown.find('.become-available').click(function(e) {
        e.preventDefault();
        return _this.conn.emit('req_user_become_available');
      });
      session_state_dropdown.find('.become-busy').click(function(e) {
        e.preventDefault();
        return _this.conn.emit('req_user_become_busy');
      });
      session_state_dropdown.find('.become-invisible').click(function(e) {
        e.preventDefault();
        return _this.conn.emit('req_user_become_invisible');
      });
      session_state_dropdown.find('.sign-off').click(function(e) {
        e.preventDefault();
        return _this.conn.emit('req_user_sign_off');
      });
    }

    UserState.prototype.set_available = function() {
      var $chat_window;
      $chat_window = $('.chat-window');
      $chat_window.show();
      this.session_state_el.find('.state').html('Available');
      return this.session_state_el.find('.btn').addClass('btn-success');
    };

    UserState.prototype.set_busy = function() {
      var $chat_window;
      $chat_window = $('.chat-window');
      $chat_window.show();
      this.session_state_el.find('.state').html('Busy');
      return this.session_state_el.find('.btn').addClass('btn-danger');
    };

    UserState.prototype.set_invisible = function() {
      var $chat_window;
      $chat_window = $('.chat-window');
      $chat_window.show();
      this.session_state_el.find('.state').html('Invisible');
      return this.session_state_el.find('.btn').addClass('btn-inverse');
    };

    UserState.prototype.set_signed_off = function() {
      var $chat_window;
      $chat_window = $('.chat-window');
      $chat_window.hide();
      return this.session_state_el.find('.state').html('Signed off');
    };

    return UserState;

  })();

  UserList = (function() {
    var conn, user_list_el;

    conn = null;

    user_list_el = null;

    function UserList(conn) {
      this.conn = conn;
      this.set_user_list = __bind(this.set_user_list, this);

      this.user_list_el = $('.users .user-list');
    }

    UserList.prototype.set_user_list = function(users) {
      var $user_el, user, _i, _len, _results,
        _this = this;
      this.user_list_el.empty();
      _results = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        $user_el = $("<li class=\"" + user.status + "\">\n    <a href=\"#\">\n        <i class=\"icon-user\"></i>\n        " + user.username + "\n    </a>\n</li>");
        $user_el.click(function(e) {
          e.preventDefault();
          return _this.conn.emit('req_chat_create', user.username);
        });
        _results.push(this.user_list_el.append($user_el));
      }
      return _results;
    };

    return UserList;

  })();

  ParticipantList = (function() {
    var participant_list_el;

    participant_list_el = null;

    function ParticipantList(conn, chat_el, users) {
      this.conn = conn;
      this.set_participant_list = __bind(this.set_participant_list, this);

      this.participant_list_el = $("<ul class=\"participant-list unstyled\" />");
      this.set_participant_list(users);
      chat_el.find('.chat-header').append(participant_list_el);
    }

    ParticipantList.prototype.set_participant_list = function(users) {
      var $user_el, user, _i, _len, _results;
      this.participant_list_el.empty();
      _results = [];
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        $user_el = $("<li class=\"" + user.status + "\">" + user.username + "</li>");
        _results.push(this.participant_list_el.append($user_el));
      }
      return _results;
    };

    return ParticipantList;

  })();

  Chat = (function() {
    var chat_el, participant_list;

    chat_el = null;

    participant_list = null;

    function Chat(conn, chat) {
      var $chat_active_toggle, $chat_list, $message_input, $message_input_el, $messages_el, self, user_chat_status,
        _this = this;
      this.conn = conn;
      this.update_add_user_list = __bind(this.update_add_user_list, this);

      this.ui_animate_new_message = __bind(this.ui_animate_new_message, this);

      this.ui_chat_scroll_down = __bind(this.ui_chat_scroll_down, this);

      this.update_chats_chat_messages_message_ui = __bind(this.update_chats_chat_messages_message_ui, this);

      this.update_chats_chat_messages_ui = __bind(this.update_chats_chat_messages_ui, this);

      this.ui_chat_clear_unread_messages = __bind(this.ui_chat_clear_unread_messages, this);

      this.ui_chat_set_unread_messages = __bind(this.ui_chat_set_unread_messages, this);

      this.archive = __bind(this.archive, this);

      this.deactivate = __bind(this.deactivate, this);

      this.activate = __bind(this.activate, this);

      this.get_user_chat_status = __bind(this.get_user_chat_status, this);

      this.add_message = __bind(this.add_message, this);

      this.chat_el = $("<div id=\"chat-" + chat.uuid + "\" class=\"chat well well-small\">\n    <div class=\"chat-header toggle-active clearfix\"></div>\n</div>");
      this.participant_list = new ParticipantList(this.conn, this.chat_el, chat.users);
      this.chat_el.find('.chat-header').after($("<div class=\"chat-controls\">\n    <div class=\"btn-group\">\n        <a class=\"btn btn-small dropdown-toggle btn-show-add-user-list\" data-toggle=\"dropdown\" href=\"#\">\n            <i class=\"icon-plus\"></i>\n        </a>\n        <ul class=\"dropdown-menu chat-user-list right-align-dropdown\"></ul>\n    </div>\n    <a href=\"#\" class=\"archive btn btn-small\"><i class=\"icon-remove\"></i></a>\n    <div class=\"unread-messages badge\"></div>\n</div>"));
      $messages_el = $('<div class="messages"><div class="messages-inner clearfix"></div></div>');
      this.chat_el.append($messages_el);
      $message_input_el = $("<div class=\"message-input input-prepend\">\n    <div class=\"add-on\"><i class=\"icon-user\"></i></div>\n    <input type=\"text\" placeholder=\"Type message\">\n</div>");
      this.chat_el.append($message_input_el);
      $message_input = $message_input_el.find('input');
      self = this;
      $message_input.keypress(function(e) {
        if (e.which === 13) {
          e.preventDefault();
          if (this.value === '') {
            return;
          }
          self.conn.emit('req_message_send', this.value, chat.uuid);
          return this.value = '';
        }
      });
      $chat_active_toggle = this.chat_el.find('.toggle-active');
      $chat_active_toggle.click(function(e) {
        e.preventDefault();
        if ($chat_active_toggle.hasClass('js_active')) {
          return _this.conn.emit('req_chat_deactivate', chat.uuid);
        } else {
          return _this.conn.emit('req_chat_activate', chat.uuid);
        }
      });
      $chat_active_toggle.mousedown(function(e) {
        return e.preventDefault();
      });
      this.chat_el.find('.btn-show-add-user-list').click(function(e) {
        e.preventDefault();
        return _this.update_add_user_list(chat.uuid);
      });
      this.chat_el.find('.archive').click(function(e) {
        e.preventDefault();
        return _this.conn.emit('req_chat_archive', chat.uuid);
      });
      $chat_list = $('.chat-list');
      $chat_list.append(this.chat_el);
      user_chat_status = this.get_user_chat_status(chat.user_chat_statuses);
      if (user_chat_status.status === 'active') {
        this.ui_chat_activate(chat.uuid);
      } else if (user_chat_status.status === 'inactive') {
        this.ui_chat_deactivate(chat.uuid);
        this.ui_chat_set_unread_messages(chat.uuid, user_chat_status.unread_messages);
      }
      if (chat.messages.length > 0) {
        this.update_chats_chat_messages_ui(chat.messages);
      }
    }

    Chat.prototype.add_message = function(message, user_chat_statuses) {};

    Chat.prototype.get_user_chat_status = function(user_chat_statuses) {
      var self, ucs;
      self = this;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = user_chat_statuses.length; _i < _len; _i++) {
          ucs = user_chat_statuses[_i];
          if (ucs.user.username === self.chat_session.username) {
            _results.push(ucs);
          }
        }
        return _results;
      })())[0];
    };

    Chat.prototype.activate = function(chat_uuid) {
      var chat, toggle;
      chat = $("#chat-" + chat_uuid);
      toggle = chat.find('.toggle-active');
      toggle.addClass('js_active');
      chat.find('.messages').show();
      chat.find('.message-input').show();
      this.ui_chat_clear_unread_messages(chat_uuid);
      return this.ui_chat_scroll_down(chat_uuid);
    };

    Chat.prototype.deactivate = function(chat_uuid) {
      var chat, toggle;
      chat = $("#chat-" + chat_uuid);
      toggle = chat.find('.toggle-active');
      toggle.removeClass('js_active');
      chat.find('.messages').hide();
      return chat.find('.message-input').hide();
    };

    Chat.prototype.archive = function(chat_uuid) {
      var chat;
      chat = $("#chat-" + chat_uuid);
      return chat.remove();
    };

    Chat.prototype.ui_chat_set_unread_messages = function(chat_uuid, count) {
      var chat, unread_messages;
      chat = $("#chat-" + chat_uuid);
      unread_messages = chat.find('.unread-messages');
      if (count > 0) {
        return unread_messages.html(count).addClass('active');
      } else {
        return unread_messages.removeClass('active');
      }
    };

    Chat.prototype.ui_chat_clear_unread_messages = function(chat_uuid) {
      var chat;
      chat = $("#chat-" + chat_uuid);
      return chat.find('.unread-messages').html('');
    };

    Chat.prototype.update_chats_chat_messages_ui = function(messages) {
      var message, _i, _len;
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        message = messages[_i];
        this.update_chats_chat_messages_message_ui(message);
      }
      return this.ui_chat_scroll_down(messages[0].chat__uuid);
    };

    Chat.prototype.update_chats_chat_messages_message_ui = function(message) {
      var $chat_messages_el, s, stamp,
        _this = this;
      $chat_messages_el = $("#chat-" + message.chat__uuid + " .messages-inner");
      stamp = function(timestamp) {
        timestamp = new Date(timestamp);
        return ('0' + timestamp.getHours()).slice(-2) + ':' + ('0' + timestamp.getMinutes()).slice(-2);
      };
      s = "<blockquote id=\"message-" + message.uuid + "\" class=\"message\n    " + (message.user_from__username === this.chat_session.username ? ' pull-right\"' : '\"') + ">\n    <p class=\"msg-body\">" + message.message_body + "</p>\n    <small class=\"msg-sender-timestamp\">" + message.user_from__username + " - " + (stamp(message.timestamp)) + "</small>\n</blockquote>";
      return $chat_messages_el.append($(s));
    };

    Chat.prototype.ui_chat_scroll_down = function(chat_uuid, animate) {
      var $msgs, $wpr;
      if (animate == null) {
        animate = false;
      }
      $wpr = $("#chat-" + chat_uuid + " .messages");
      $msgs = $wpr.find('.messages-inner');
      if (!animate) {
        return $wpr.scrollTop($msgs.outerHeight());
      } else {
        return $wpr.animate({
          scrollTop: $msgs.outerHeight()
        }, 1000);
      }
    };

    Chat.prototype.ui_animate_new_message = function(chat_uuid) {
      var animate;
      return this.ui_chat_scroll_down(chat_uuid, animate = true);
    };

    Chat.prototype.update_add_user_list = function(chat_uuid) {
      var $chat_user_list, chat, user, _i, _len, _ref,
        _this = this;
      chat = $("#chat-" + chat_uuid);
      $chat_user_list = chat.find('.chat-controls .chat-user-list');
      $chat_user_list.empty();
      _ref = this.chat_users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        $chat_user_list.append("<li><a href=\"#\" class=\"user-add\" data-username=\"" + user.username + "\"><i class=\"icon-user\"></i> " + user.username + "</a></li>");
      }
      return $chat_user_list.on('click', '.user-add', function(e) {
        e.preventDefault();
        return _this.conn.emit('req_chat_add_user', chat_uuid, $(e.target).data('username'));
      });
    };

    return Chat;

  })();

  ChatApp = (function() {
    var chat_session, chats, conn, user_list, user_state;

    function ChatApp() {
      this.init = __bind(this.init, this);

    }

    chat_session = null;

    conn = null;

    user_state = null;

    user_list = null;

    chats = {};

    ChatApp.prototype.init = function() {
      this.connect();
      this.user_state = new UserState(this.conn);
      return this.user_list = new UserList(this.conn);
    };

    ChatApp.prototype.debug_log = function(msg) {
      var control, now;
      control = $('.debug-log');
      now = new Date();
      return control.append(now.toLocaleTimeString() + ': ' + msg + '<br/>');
    };

    ChatApp.prototype.connect = function() {
      var _this = this;
      this.conn = io.connect('https://' + window.location.host, {
        'force_new_connection': false,
        'rememberTransport': true,
        'resource': 'chat/socket.io'
      });
      this.debug_log('Connecting...');
      this.conn.on('connect', function() {
        return _this.debug_log('Connected');
      });
      this.conn.on('ev_chat_session_status', function(chat_session) {
        _this.chat_session = chat_session;
        if (_this.chat_session.status === 0) {
          return _this.user_state.set_signed_off();
        }
      });
      this.conn.on('ev_data_update', function(chat_session, chat_users, chats) {
        var chat, _i, _len, _results;
        _this.chat_session = chat_session;
        if (_this.chat_session.status === 1) {
          _this.user_state.set_available();
        }
        if (_this.chat_session.status === 2) {
          _this.user_state.set_invisible();
        }
        if (_this.chat_session.status === 3) {
          _this.user_state.set_busy();
        }
        _this.user_list.set_user_list(chat_users);
        _results = [];
        for (_i = 0, _len = chats.length; _i < _len; _i++) {
          chat = chats[_i];
          _results.push(_this.chats[chat.uuid] = new Chat(_this.conn, chat));
        }
        return _results;
      });
      this.conn.on('disconnect', function(data) {
        _this.debug_log('Disconnect');
        return _this.conn = null;
      });
      this.conn.on('ev_user_became_available', function(username, users) {
        _this.debug_log("" + username + " became available.");
        return _this.user_list.set_user_list(users);
      });
      this.conn.on('ev_user_became_busy', function(username, users) {
        _this.debug_log("" + username + " became busy.");
        return _this.user_list.set_user_list(users);
      });
      this.conn.on('ev_user_signed_off', function(username, users) {
        _this.debug_log("" + username + " signed off.");
        return _this.user_list.set_user_list(users);
      });
      this.conn.on('ev_chat_created', function(chat) {
        return _this.chats[chat.uuid] = new Chat(_this.conn, chat);
      });
      this.conn.on('ev_you_were_added', function(chat) {
        return _this.chats[chat.uuid] = new Chat(_this.conn, chat);
      });
      this.conn.on('ev_chat_user_added', function(chat_uuid, username, users) {
        return _this.chats[chat_uuid].participant_list.set_participant_list(users);
      });
      this.conn.on('ev_message_sent', function(message, user_chat_statuses) {
        return _this.chats[message.chat_uuid].add_message(message, user_chat_statuses);
      });
      this.conn.on('ev_chat_activated', function(chat_uuid) {
        return _this.chats[chat_uuid].activate();
      });
      this.conn.on('ev_chat_deactivated', function(chat_uuid) {
        return _this.chats[chat_uuid].deactivate();
      });
      return this.conn.on('ev_chat_archived', function(chat_uuid) {
        return _this.chats[chat_uuid].archive();
      });
    };

    return ChatApp;

  })();

  $(function() {
    var chat_app;
    chat_app = new ChatApp();
    return chat_app.init();
  });

}).call(this);
